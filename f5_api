import json
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning

# Disable SSL warnings (not recommended for production)
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


class F5BigIP:
    """Base class for interacting with F5 BIG-IP REST API."""

    def __init__(self, host, username, password):
        self.host = host
        self.username = username
        self.password = password
        self.token = None
        self.login()

    def _make_request(self, method, uri, data=None):
        """Helper method to make HTTP requests."""
        url = f"https://{self.host}{uri}"
        headers = {
            "content-type": "application/json",
            "X-F5-Auth-Token": self.token
        }
        response = requests.request(
            method, url, headers=headers, data=json.dumps(data), verify=False
        )
        response.raise_for_status()  # Raise an exception for HTTP errors
        return response.json()

    def login(self):
        """Authenticate and retrieve the token."""
        uri = "/mgmt/shared/authn/login"
        data = {
            "username": self.username,
            "password": self.password,
            "loginProviderName": "tmos"
        }
        response = self._make_request("post", uri, data)
        self.token = response["token"]["token"]

    def failover_status(self):
        """Get the failover status of the device."""
        uri = "/mgmt/tm/cm/failover-status"
        return self._make_request("get", uri)


class NodeManager(F5BigIP):
    """Class for managing nodes on the F5 BIG-IP device."""

    def find_nodes(self):
        """Fetch all nodes in JSON format."""
        uri = "/mgmt/tm/ltm/node"
        return self._make_request("get", uri)

    def create_node(self, name, address):
        """Create a new node."""
        uri = "/mgmt/tm/ltm/node"
        data = {"name": name, "partition": "Common", "address": address}
        return self._make_request("post", uri, data)

    def disable_node(self, node_name):
        """Disable a specific node."""
        uri = f"/mgmt/tm/ltm/node/{node_name}"
        data = {"session": "user-disabled"}
        return self._make_request("patch", uri, data)

    def enable_node(self, node_name):
        """Enable a specific node."""
        uri = f"/mgmt/tm/ltm/node/{node_name}"
        data = {"session": "user-enabled"}
        return self._make_request("patch", uri, data)


class PoolManager(F5BigIP):
    """Class for managing pools on the F5 BIG-IP device."""

    def find_pools(self):
        """Fetch all pools in JSON format."""
        uri = "/mgmt/tm/ltm/pool"
        return self._make_request("get", uri)

    def create_pool(self, name, monitor="http", members=None):
        """Create a new pool."""
        uri = "/mgmt/tm/ltm/pool"
        data = {
            "name": name,
            "partition": "Common",
            "monitor": f"/Common/{monitor}",
            "members": members or []
        }
        return self._make_request("post", uri, data)


class VIPManager(F5BigIP):
    """Class for managing Virtual IPs (VIPs) on the F5 BIG-IP device."""

    def find_vips(self):
        """Fetch all VIPs in JSON format."""
        uri = "/mgmt/tm/ltm/virtual/?options=destination"
        return self._make_request("get", uri)

    def create_vip(self, name, destination, pool):
        """Create a new VIP."""
        uri = "/mgmt/tm/ltm/virtual"
        data = {
            "partition": "Common",
            "name": name,
            "destination": destination,
            "pool": pool
        }
        return self._make_request("post", uri, data)


# Example Usage
if __name__ == "__main__":
    # Initialize the F5 BIG-IP connection
    f5 = F5BigIP(host="192.168.1.1", username="admin", password="admin")

    # Manage nodes
    node_manager = NodeManager(host="192.168.1.1", username="admin", password="admin")
    print("Nodes:", node_manager.find_nodes())
    print("Create Node:", node_manager.create_node("test_node", "192.168.1.100"))

    # Manage pools
    pool_manager = PoolManager(host="192.168.1.1", username="admin", password="admin")
    print("Pools:", pool_manager.find_pools())
    print("Create Pool:", pool_manager.create_pool("test_pool", members=["test_node:80"]))

    # Manage VIPs
    vip_manager = VIPManager(host="192.168.1.1", username="admin", password="admin")
    print("VIPs:", vip_manager.find_vips())
    print("Create VIP:", vip_manager.create_vip("vs-test", "1.1.1.1:443", "test_pool"))
