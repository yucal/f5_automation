import json
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
import urllib

class token:
        def __init__(self,token):
                self.token=token
class host:
        def __init__(self,host):
                self.host=host
class user:
        def __init__(self,user,password,host):
                self.user=user
                self.password=password
                self.host=host
        def login(self):
                data={'username':self.user,'password':self.password,"loginProviderName": "tmos"}
                rest_url="https://%s/mgmt/shared/authn/login"%(self.host)
                header={'content-type': 'application/json'}
                response=requests.post(url=rest_url,headers=header,data=json.dumps(data),verify=False)
                r_json=json.loads(response.content)
                try:
                        self.token=r_json['token']['token']

                        t.token=self.token
                        h.host=self.host
                except Exception as e:
                        raise("Access Failed")

        def failover(self):
                header={'content-type': 'application/json',"X-F5-Auth-Token":t.token}
                data={}
                uri='/mgmt/tm/cm/failover-status'
                method='get'
                response=base_api(uri,header,data,method)
                r_json=json.loads(response.content)
                return r_json
class node:

        def find_nodes(self):
                """all nodes will be listed in json"""
                data={}
                header={'content-type': 'application/json',"X-F5-Auth-Token":t.token}
                uri='/mgmt/tm/ltm/node'
                method='get'
                response=base_api(uri,header,data,method)
                r_json=json.loads(response.content)
                return r_json

        def create_node(self,name,address):
                 data={"name":name,"partition":"Common","address":adress}
                header={'content-type': 'application/json',"X-F5-Auth-Token":t.token}
                uri='/mgmt/tm/ltm/node'
                method='post'
                response=base_api(uri,header,data,method)
                return response.content

        def disable_node(self):
                data={"session":"user-disabled"}
                header={'content-type': 'application/json',"X-F5-Auth-Token":t.token}
                uri='/mgmt/tm/ltm/node/test_node'
                method='patch'
                response=self.base_api(uri,header,data,method)
                r_json=json.loads(response.content)
                return json.dumps(r_json,indent=4)

        def enable_node(self):
                data={"session":"user-enabled"}
                header={'content-type': 'application/json',"X-F5-Auth-Token":t.token}
                uri='/mgmt/tm/ltm/node/test_node'
                method='patch'
                response=base_api(uri,header,data,method)
                r_json=json.loads(response.content)
                return json.dumps(r_json,indent=4)
        def add_node_to_pool(self):
                data={"name":"/Common/test_node:80"}
                response=base_api('/mgmt/tm/ltm/pool/test_pool/members',token,data)
                r_json=json.loads(response.content)
                return json.dumps(r_json,indent=4)

        def disable_node_from_pool(self):
                data={"session":"user-disabled"}
                response=base_api('/mgmt/tm/ltm/pool/test_pool/members/~Common~test_node:80',token,data)
                r_json=json.loads(response.content)
                return json.dumps(r_json,indent=4)
        def enable_node_from_pool(self):
                data={"session":"user-enabled"}
                response=base_api('/mgmt/tm/ltm/pool/test_pool/members/~Common~test_node:80',token,data)
                r_json=json.loads(response.content)
                return json.dumps(r_json,indent=4)
class pool:
        def find_pools(self):
                uri='/mgmt/tm/ltm/pool'
                  header={'content-type': 'application/json',"X-F5-Auth-Token":t.token}
                  data={}
                  method='get'
                  response=base_api(uri,header,data,method)
                  r_json=json.loads(response.content)
                  return r_json
        def create_pool(self):
                  data={"name":"test_pool","partition":"Common","monitor":"/Common/http","members":"test_node:80"}
                  header={'content-type': 'application/json',"X-F5-Auth-Token":t.token}
                  uri='/mgmt/tm/ltm/pool'
                  method='post'
                  response=base_api(uri,header,data,method)
                  r_json=json.loads(response.content  )
                  return json.dumps(r_json,indent=4)
                  
                  
class datagroup:
          def find_data_groups(self):
                """all data groups will be listed in json"""
                uri='/mgmt/tm/ltm/data-group/internal'
                header={'content-type': 'application/json',"X-F5-Auth-Token":t.token}
                data={}
                param={}
                method='get'
                response=self.base_api(uri,header,data,param,method)
                r_json=json.loads(response.content)
                return json.dumps(r_json,indent=4)
          def add_ip_datagroup(self):                
                params = (('options', 'records add { 1.2.3.5/32 }'),)
                data= {"name":"test"}
                header={'content-type': 'application/json',"X-F5-Auth-Token":t.token}
                uri='/mgmt/tm/ltm/data-group/internal/%s'%('test')
                method='patch'
                response=self.base_api(uri,header,data,params,method)
                r_json=json.loads(response.content)
                return json.dumps(r_json,indent=4)
class vip:
          def find_vips(self):
                uri='/mgmt/tm/ltm/virtual/?options=destination'
                header={'content-type': 'application/json',"X-F5-Auth-Token":t.token}
                data={}
                method='get'
                response=base_api(uri,header,data,method)
                r_json=json.loads(response.content)
                return r_json
                
                
                
           def create_vip(self):
                data={"partition":"Common","name": "vs-test", "destination":"1.1.1.1:443","pool":"test_pool"}
                header={'content-type': 'application/json',"X-F5-Auth-Token":self.token}
                method='post'
                uri='/mgmt/tm/ltm/virtual/'
                response=base_api(uri,header,data,method)
                r_json=json.loads(response.content)
                return r_json
                
                
t=token('')
h=host('')
def base_api(uri,header,data,method):
      rest_url="https://%s%s"%(h.host,uri)
      print rest_url
      if method=='get':
      response=requests.get(url=rest_url,headers=header,verify=False)
      return response
      if method=='post':
      response=requests.post(url=rest_url,headers=header,data=json.dumps(data),verify=False)
      return response
